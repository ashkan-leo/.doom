#+TITLE: Pip Boy Emacs Configurations

* Table of Contents :TOC_3:
- [[#preamble][Preamble]]
  - [[#lexical-bindings][Lexical Bindings]]
  - [[#personal-information][Personal Information]]
- [[#os-specific-settings][OS Specific Settings]]
  - [[#mac-os][Mac OS]]
    - [[#set----keys][Set ⌘ ⌥ ⌃ Keys]]
- [[#ui][UI]]
  - [[#splash-image][Splash Image]]
  - [[#main-theme][Main Theme]]
  - [[#mouse-cursor-color][Mouse Cursor Color]]
  - [[#evil-cursor-state-colors][Evil Cursor State Colors]]
  - [[#modeline][Modeline]]
    - [[#configure-doom-modeline][Configure doom-modeline]]
    - [[#show-battery-usage][Show battery usage]]
    - [[#disable-buffer-size][Disable buffer size]]
  - [[#treemacs][Treemacs]]
  - [[#editor][Editor]]
    - [[#line-numbers][Line Numbers]]
    - [[#font][Font]]
- [[#terminal][Terminal]]
  - [[#tmux][tmux]]
    - [[#key-bindings][Key Bindings]]
  - [[#vterm][vterm]]
- [[#spell-checker][Spell Checker]]
- [[#dired][dired]]
- [[#projectile][Projectile]]
- [[#data][data]]
  - [[#dash][dash]]
- [[#org][Org]]
  - [[#aesthetics][Aesthetics]]
  - [[#key-maps][Key Maps]]
  - [[#directory-structure][Directory Structure]]
  - [[#get-things-done][Get Things Done]]
    - [[#files][Files]]
    - [[#state-keywords][State Keywords]]
    - [[#tags][Tags]]
    - [[#org-agenda][org-agenda]]
    - [[#org-refile][org-refile]]
    - [[#org-capture][org-capture]]
    - [[#org-archive][org archive]]
  - [[#zettelkasten][Zettelkasten]]
    - [[#org-roam][org-roam]]
    - [[#org-ref][org-ref]]
    - [[#helm-bibtex--ivy-bibtex][helm-bibtex & ivy-bibtex]]
    - [[#org-noter][org-noter]]
    - [[#org-roam-bibtex][org-roam-bibtex]]
    - [[#deft][deft]]
  - [[#enable-minor-modes][Enable minor modes]]
  - [[#org-export][org-export]]
    - [[#latex][LaTex]]
    - [[#resume-and-cv][Resume and CV]]
  - [[#org-babel][org-babel]]
    - [[#prolog][Prolog]]
  - [[#org-drill][org-drill]]
- [[#latex-1][LaTeX]]
- [[#flycheck][Flycheck]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
    - [[#key-bindings-1][Key Bindings]]
    - [[#lsp-configurations][LSP Configurations]]
    - [[#lsp-ui-configurations][LSP UI Configurations]]
    - [[#lsp-treemacs][LSP Treemacs]]
  - [[#python][Python]]
    - [[#sphinx-doc][~sphinx-doc~]]
  - [[#prolog-1][Prolog]]
    - [[#ediprolog][~ediprolog~]]
  - [[#scala][Scala]]
  - [[#haskell][Haskell]]

* Preamble
** Lexical Bindings
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
#+END_SRC
** Personal Information
#+BEGIN_SRC emacs-lisp
;; (setq! user-full-name "Ashkan Aleali"
;;        user-mail-address "ashkan.aleali@gmail.com")
#+END_SRC

* OS Specific Settings
** Mac OS
*** Set ⌘ ⌥ ⌃ Keys
Set command, option, and alt key for both the left and the right part of the
keyboard.
#+BEGIN_SRC emacs-lisp
(setq! mac-option-modifier 'meta
       mac-right-option-modifier 'meta
       mac-command-modifier 'super
       mac-right-command-modifier 'super)
#+END_SRC
* UI
** Splash Image
Because it's a Pip Boy Emacs ;)
#+begin_src emacs-lisp
(setq! fancy-splash-image (expand-file-name "splash/pipboy.png" doom-private-dir))
#+end_src
** Main Theme
I'm obsessed with the dark solarized theme, but it looks blue in my terminal. So
I use zenburn if I'm in the terminal.

#+begin_src emacs-lisp
(setq! doom-theme (if (display-graphic-p) 'doom-solarized-dark 'doom-zenburn))
#+end_src
** Mouse Cursor Color
#+begin_src emacs-lisp
(set-mouse-color "red")
#+end_src
** Evil Cursor State Colors
#+begin_src emacs-lisp
(setq! evil-default-cursor '("DodgerBlue1" box)
       evil-normal-state-cursor  '("gray" box)
       evil-emacs-state-cursor   '("orange" box)
       evil-motion-state-cursor  '("SeaGreen1" box)
       evil-insert-state-cursor  '("white" bar)
       evil-visual-state-cursor  '("white" hbar)
       evil-replace-state-cursor '("pink" hbar))
#+end_src
** Modeline
*** Configure doom-modeline
#+BEGIN_SRC emacs-lisp
(setq! doom-modeline-icon (display-graphic-p)
       doom-modeline-major-mode-icon t
       doom-modeline-lsp t
       doom-modeline-buffer-file-name-style 'truncate-with-project
       doom-modeline-buffer-encoding nil)
#+END_SRC
*** Show battery usage
+ Ignore any error here. If running on a PC or server there is no battery status
  to show.
#+BEGIN_SRC emacs-lisp
(ignore-errors (display-battery-mode))
#+END_SRC
*** Disable buffer size
Who cares how many bytes this file has?
#+BEGIN_SRC emacs-lisp
(size-indication-mode nil)
#+END_SRC
** Treemacs
+ Use the colorful treemacs theme and doom additions
   #+BEGIN_SRC emacs-lisp
   (setq! doom-themes-treemacs-theme "doom-colors")
   (doom-themes-treemacs-config)
   #+END_SRC
+ hide files ignored by Git from treemacs
  #+BEGIN_SRC emacs-lisp
  (after! treemacs
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
  #+END_SRC
** Editor
*** Line Numbers
Setting the line number will cause slowdown when the LSP is used, display is large,
or anytime the buffer is busy.
#+BEGIN_SRC emacs-lisp
(setq! display-line-numbers-type nil)
#+END_SRC
*** Font
+ Set the font
  #+BEGIN_SRC emacs-lisp
  (setq! doom-font (font-spec :family "JetBrains Mono" :size 12))
  #+END_SRC
+ Enable ligatures -- works only on Emacs Mac port.
  #+BEGIN_SRC emacs-lisp
  (ignore-errors (mac-auto-operator-composition-mode))
  #+END_SRC
* Terminal
** tmux
*** Key Bindings
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("a" . "applications")
       (:prefix ("t" . "tmux")
        :desc "cd to buffer dir in active tmux session" "c" #'+tmux/cd
        :desc "cd to project dir in active tmux session" "p" #'+tmux/cd-to-project
        :desc "cd to highlighted region in active tmux session" "C" #'+tmux:cd-here
        :desc "run highlighted region as comand in active tmux session" "x" #'+tmux:run
        :desc "run command in active tmux session" "t" #'+tmux/run
        :desc "re-run the last command in active tmux session" "r" #'+tmux/rerun)))
#+END_SRC
** vterm
+ Set =fish= to be the default shell.
  #+BEGIN_SRC emacs-lisp
  (setq! vterm-shell "fish")
  #+END_SRC
* Spell Checker
+ set personal ~ispell~ dictionary.
  #+begin_src emacs-lisp
  (setq! ispell-personal-dictionary "~/Dropbox/Apps/ispell/english.pws")
  #+end_src
* dired
+ Enable the DWIM (/Do What I Mean/) mode, which makes life much easier when moving stuff around in
  the ~dired~ mode.
#+BEGIN_SRC emacs-lisp
(setq! dired-dwim-target t)
#+END_SRC
* Projectile
+ Set projectile search path to add new projects.
  #+BEGIN_SRC emacs-lisp
  (setq! projectile-project-search-path '("~/w" "~/Workspace" "~/Workspace/REPO"))
  #+END_SRC
* data
** dash
+ Search Dash GUI from Emacs. Pretty handy!
#+BEGIN_SRC emacs-lisp
(map! "\C-cd" 'dash-at-point)
(map! "\C-ce" 'dash-at-point-with-docset)
#+END_SRC
* Org
I use Org for GTD, Zettelkasten workflows, and as a replacement for markdown and
LaTeX whenever possible.
** Aesthetics
Configure the aesthetics of the org-mode buffer.
#+BEGIN_SRC emacs-lisp
(setq! org-hide-emphasis-markers t
       org-fontify-done-headline t
       org-fontify-whole-heading-line t
       org-fontify-todo-headline t
       org-fontify-emphasized-text t
       org-fontify-quote-and-verse-blocks t)
#+END_SRC
** Key Maps
#+BEGIN_SRC emacs-lisp
(after! org
  (map! :map org-mode-map
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup
        :n  ))
#+END_SRC
** Directory Structure
These paths are usually synced through a cloud provided or a git service. These
paths include the followings:
+ org-roam and org-mode notes files.
+ Bibliography files generated by Zotero.
+ GTD workflow files.
#+BEGIN_SRC emacs-lisp
(setq! pipboy/org-notes (expand-file-name "~/Dropbox/Apps/org-roam/")
       pipboy/bibtex-files (directory-files "~/Dropbox/Apps/bibliography/bib/" 'full ".bib")
       pipboy/pdf-directory (expand-file-name "~/Dropbox/Apps/bibliography/pdf/")
       pipboy/gtd-directory (expand-file-name "~/Dropbox/Apps/beorg"))
#+END_SRC
** Get Things Done
*** Files
Here I set the files to be used by agenda and other task management
functionalities of the org-mode. I follow the GTD workflow.
1) I quick capture my tasks to my inbox.
2) I use the gtd file to organize my projects.
3) I use someday to backlog the tasks I don't wish to complete in the short
   term.
#+BEGIN_SRC emacs-lisp
(setq! org-inbox-file-name (expand-file-name "inbox.org" pipboy/gtd-directory) ;; TODO
       org-tickler-file-name (expand-file-name "tickler.org" pipboy/gtd-directory) ;; TODO
       org-someday-file-name (expand-file-name "someday.org" pipboy/gtd-directory) ;; TODO
       org-gtd-file-name (expand-file-name "gtd.org" pipboy/gtd-directory) ;; TODO

       org-notes-file-name (expand-file-name "notes.org" pipboy/gtd-directory) )
#+END_SRC
*** State Keywords
Set both the keywords and the face of GTD workflow.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-todo-keywords '((sequence "TODO(t)" "NOW(z)" "NEXT(n)" "WAIT(w)" "SOMEDAY(s) HOLD(h)" "PROJECT(p)"
                                       "|" "DONE(d)" "CANCEL(c)")
                             (sequence "[ ](T)" "[?](W)" "[-](N)"
                                       "|" "[X](x)"))

         org-todo-keyword-faces '(("NOW" . (:foreground "magenta" :reight "bold"))
                                  ("NEXT" . (:foreground "violet" :weight "bold"))
                                  ("WAIT" . +org-todo-onhold)
                                  ("HOLD" . +org-todo-onhold)
                                  ("SOMEDAY" . +org-todo-onhold)
                                  ("PROJECT". +org-todo-project)
                                  ("ABORT" . (+org-todo-inactive))
                                  ("[-]" . +org-todo-active)
                                  ("[?]" . +org-todo-onhold))))
#+END_SRC
*** Tags
These are the tags that I use with my task management workflow.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-tag-alist '((:startgroup . nil)
                         ("@work" . ?w)
                         ("@home" . ?h)
                         ("@business" . ?b)
                         ("@university" . ?u)
                         ("@travel" . ?t)
                         (:endgroup)

                         (:startgroup . nil)
                         ("@errand". ?r)
                         ("@phone" . ?p)
                         ("@email" . ?e)
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("emacs")
                         ("tools")
                         ("server")
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("read")
                         ("write")
                         ("study")
                         ("implement")
                         ("research")
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("TOC_1" . ?1)
                         ("TOC_2" . ?2)
                         ("TOC_3" . ?3)
                         ("TOC_4" . ?4)
                         (:endgroup . nil))))
#+END_SRC
*** org-agenda
**** Files
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-agenda-files (list pipboy/gtd-directory)
         org-agenda-show-inherited-tags t
         org-default-notes-file org-inbox-file-name))
#+END_SRC
**** org-super-agenda
#+BEGIN_SRC emacs-lisp
(use-package! org-super-agenda
  :defer
  :after (org org-mode org-super-agenda)
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))
#+END_SRC
**** Agenda View
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-agenda-skip-scheduled-if-done t
       org-agenda-skip-deadline-if-done t
       org-agenda-include-deadlines t
       org-agenda-block-separator nil
       org-agenda-tags-column 100 ;; from testing this seems to be a good value
       org-agenda-compact-blocks t)

  (setq! org-agenda-custom-commands
       '(("o" "Overview"
          ((agenda "" ((org-agenda-span 'day)
                       (org-super-agenda-groups
                        '((:name "Today" :time-grid t :date today :scheduled today :order 1)
                          (:name "Due" :deadline today :order 2)))))
           (todo "" ((org-agenda-overriding-header "")
                     (org-super-agenda-groups
                      '((:name "Next to do" :todo "NEXT" :order 1)
                        (:name "Important" :priority "A" :order 6)
                        (:name "Due Today" :deadline today :order 2)
                        (:name "Due Soon" :deadline future :order 8)
                        (:name "Overdue" :deadline past :face error :order 7)
                        (:name "Inbox" :category "inbox" :order 10)
                        (:name "Projects" :tag "Project" :order 14)
                        (:name "To read" :tag "Read" :order 30)
                        (:name "Waiting" :todo "WAIT" :order 20)
                        (:name "University" :tag "University" :order 32)
                        (:discard (:tag ("Chore" "Routine" "Daily")))))))))

         ("x" "experimental"
          ((agenda "" ((org-agenda-span 'week)))
           (todo "" ((org-agenda-overriding-header "")
                     (org-agenda-remove-tags 1)
                     (org-super-agenda-groups
                      '((:name "Next" :todo "NEXT" :order 1)
                        (:name "Due Today" :deadline today :order 2)
                        (:name "Due Soon" :deadline future :order 3)
                        (:name "Overdue" :deadline past :face error :order 7)
                        (:name "Waiting" :todo "WAIT" :order 20)
                        (:discard (:anything t))))))))
         ("p" "Projects"
          ((todo "" ((org-agenda-overriding-header "All Projects")
                     (org-agenda-remove-tags 1)
                     (org-super-agenda-groups
                      '((:auto-parent t :todo "TODO")))))))

         ("h" "@home Projects"
          ((todo "" ((org-agenda-overriding-header "Personal Projects")
                     (org-agenda-remove-tags 1)
                     (org-super-agenda-groups
                      '((:discard (:not (:and (:todo "TODO" :tag ("@home")))))
                        (:auto-parent t :todo "TODO" :tag "@home")))))))

         ("w" "@work Projects"
          ((todo "" ((org-agenda-overriding-header "Work Projects")
                     (org-agenda-remove-tags 1)
                     (org-super-agenda-groups
                      '((:discard (:not (:and (:todo "TODO" :tag ("@work")))))
                        (:auto-parent t)))))))

         ("r" "Errands"
          ((alltodo "" ((org-agenda-overriding-header "Errands")
                        (org-super-agenda-groups
                         '((:discard (:not (:tag "@errand")))))))))

         ("i" "Inbox"
          ((alltodo "" ((org-agenda-overriding-header "Inbox")
                        (org-super-agenda-groups
                         '((:name "Inbox" :category "inbox")
                           (:discard (:anything t)))))))))))
#+END_SRC
*** org-refile
Set the refile targets to be my project, someday, and tickler files.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-refile-targets '((org-gtd-file-name :maxlevel . 3)
                              (org-someday-file-name :level . 1)
                              (org-tickler-file-name :maxlevel . 2))
         org-refile-allow-creating-parent-nodes 'confirm))
#+END_SRC
*** org-capture
#+BEGIN_SRC emacs-lisp
(after! org
  (setq!
   org-capture-templates `(("i" "Inbox" entry
                            (file+headline org-inbox-file-name "Tasks")
                            "* TODO %i%?\n%U")

                           ("I" "Inbox This Line" entry
                            (file+headline org-inbox-file-name "Tasks")
                            "* TODO %i%?\n%U\n%a")

                           ("t" "Tickler" entry
                            (file+headline org-tickler-file-name "Tickler")
                            "* %i%?\n%U")

                           ("T" "Tickler This Line" entry
                            (file+headline org-tickler-file-name "Tickler")
                            "* %i%?\n%U\n%a")
                           ("p"
                            "Protocol"
                            entry
                            (file+headline ,org-notes-file-name "Notes")
                            "* %? [[%:link][%:description]]\n%U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n")
                           ("L"
                            "Protocol Link"
                            entry
                            (file+headline ,org-notes-file-name "Notes")
                            "* %?[[%:link][%:description]]\n%U\n"))))
#+END_SRC
*** org archive
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-archive-location (concat (expand-file-name "archive.org" pipboy/gtd-directory) "::")))
#+END_SRC
** Zettelkasten
This section contains the configurations enabling me to take notes using
~org-roam~. I also take notes on papers and books using ~org-roam~. I configure
bibtex related packages to be able to use my bibs generated by Zotero in
~org-roam~.
*** org-roam
It's better to read this from the environment instead.
I am moving to a pure org-roam workflow; set org-directory to be the org-roam
files also.
#+begin_src emacs-lisp
(setq! org-roam-directory pipboy/org-notes
       org-directory pipboy/org-notes)
#+end_src
*** org-ref
Most of these configurations are inspired by [[https://www.ianjones.us/org-roam-bibtex][this link]].
#+BEGIN_SRC emacs-lisp
(use-package! org-ref
  :defer
  :after org-mode
  :config
  (setq! org-ref-bibliography-notes (concat pipboy/org-notes "/bibnotes.org") ;; TODO make this more explicit
         org-ref-notes-directory pipboy/org-notes
         org-ref-bibliography-files pipboy/bibtex-files
         reftex-default-bibliography pipboy/bibtex-files
         org-ref-default-bibliography pipboy/bibtex-files
         org-ref-pdf-directory pipboy/pdf-directory
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
         org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-function 'orb-edit-notes))
;; TODO Rewrite title formats using the (concat ...) function
#+END_SRC

See examples in[[*helm-bibtex][ helm-bibtex]] section.
*** helm-bibtex & ivy-bibtex
#+BEGIN_SRC emacs-lisp
(setq! bibtex-completion-notes-path pipboy/org-notes
       bibtex-completion-bibliography pipboy/bibtex-files
       bibtex-completion-pdf-field "file"
       bibtex-completion-notes-template-multiple-files (concat
                                                        "#+TITLE: ${title}\n"
                                                        "#+ROAM_KEY: cite:${=key=}\n"
                                                        "* TODO Notes\n"
                                                        ":PROPERTIES:\n"
                                                        ":Custom_ID: ${=key=}\n"
                                                        ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
                                                        ":AUTHOR: ${author-abbrev}\n"
                                                        ":JOURNAL: ${journaltitle}\n"
                                                        ":DATE: ${date}\n"
                                                        ":YEAR: ${year}\n"
                                                        ":DOI: ${doi}\n"
                                                        ":URL: ${url}\n"
                                                        ":END:\n\n"))
#+END_SRC

*** org-noter
I use org-noter to take notes on PDF and EPUB documents.
#+BEGIN_SRC emacs-lisp
(setq! org-noter-notes-search-path (list pipboy/org-notes)
       org-noter-notes-window-location 'horizontal-split)
#+END_SRC
**** org-pdftools
#+BEGIN_SRC emacs-lisp
(use-package! org-pdftools
  :defer
  :after org-mode
  :hook
  (org-mode . org-pdftools-setup-link))
#+END_SRC
**** org-noter-pdftools
#+BEGIN_SRC emacs-lisp
(use-package! org-noter-pdftools
  :after org-noter
  :defer
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC
*** org-roam-bibtex
~org-roam-bibtex~ is a library which offers a tighter integration between
~org-roam~, ~helm-bibtex~, and ~org-ref~.

#+BEGIN_SRC emacs-lisp
(use-package! org-roam-bibtex
  :defer
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}
- tags ::
- keywords :: ${keywords}
\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"
           :unnarrowed t))))
#+END_SRC

*** deft
**** deft user interface
#+BEGIN_SRC emacs-lisp
(defun my-deft/strip-quotes (str)
  (cond ((string-match "\"\\(.+\\)\"" str) (match-string 1 str))
        ((string-match "'\\(.+\\)'" str) (match-string 1 str))
        (t str)))

(defun my-deft/parse-title-from-front-matter-data (str)
  (if (string-match "^title: \\(.+\\)" str)
      (let* ((title-text (my-deft/strip-quotes (match-string 1 str)))
             (is-draft (string-match "^draft: true" str)))
        (concat (if is-draft "[DRAFT] " "") title-text))))

(defun my-deft/deft-file-relative-directory (filename)
  (file-name-directory (file-relative-name filename deft-directory)))

(defun my-deft/title-prefix-from-file-name (filename)
  (let ((reldir (my-deft/deft-file-relative-directory filename)))
    (if reldir
        (concat (directory-file-name reldir) " > "))))

(defun my-deft/parse-title-with-directory-prepended (orig &rest args)
  (let ((str (nth 1 args))
        (filename (car args)))
    (concat
      (my-deft/title-prefix-from-file-name filename)
      (let ((nondir (file-name-nondirectory filename)))
        (if (or (string-prefix-p "README" nondir)
                (string-suffix-p ".txt" filename))
            nondir
          (if (string-prefix-p "---\n" str)
              (my-deft/parse-title-from-front-matter-data
               (car (split-string (substring str 4) "\n---\n")))
            (apply orig args)))))))

(provide 'my-deft-title)
(require 'my-deft-title)
(advice-add 'deft-parse-title :around #'my-deft/parse-title-with-directory-prepended)
#+END_SRC
**** deft directory
I use deft to search the notes I take using org roam.
#+begin_src emacs-lisp
(setq! deft-directory pipboy/org-notes
       deft-recursive t)
#+end_src
** Enable minor modes
  #+begin_src emacs-lisp
  (add-hook! 'org-mode-hook #'auto-fill-mode)
  #+end_src
** org-export
*** LaTex
+ Enable bibtex compilation
+ Set log files to intermediate files generated by the exporter so org-export
  delete these after exporting
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("%latex -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "%latex -interaction nonstopmode -output-directory %o %f"
        "%latex -interaction nonstopmode -output-directory %o %f")
      org-latex-logfiles-extensions
      '("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb"
        "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
        "pygtex" "pygstyle"))
#+END_SRC

+ [ ] Set LaTex export engine to be XeLaTex

*** TODO Resume and CV
**** org-CV
***** LaTex Backends
+ Define two backends to export resumes to latex.
#+BEGIN_SRC emacs-lisp
(use-package! ox-moderncv
  :defer
  :load-path "~/w/org-cv/"
  :init(require 'ox-moderncv))
(use-package! ox-altacv
  :defer
  :load-path "~/w/org-cv/"
  :init (require 'ox-altacv))
#+END_SRC
** org-babel
*** Prolog
#+BEGIN_SRC emacs-lisp
(use-package! ob-prolog
  :defer
  :after org-mod)
#+END_SRC
** org-drill
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'cl)
  (require 'org-drill))
#+END_SRC
* LaTeX
+ Use xalatex by default
  #+BEGIN_SRC emacs-lisp
   (setq-default TeX-engine 'xetex)
  #+END_SRC
+ Always Generate PDF for TeX files
  #+BEGIN_SRC emacs-lisp
  (setq-default TeX-PDF-mode t)
  #+END_SRC
+ Use luatex in latex-preview-pate
  #+BEGIN_SRC emacs-lisp
  (setq pdf-latex-command "xetex")
  #+END_SRC
* Flycheck
+ Check syntax automatically.
  #+BEGIN_SRC emacs-lisp
  (after! flycheck
    (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change)))
  #+END_SRC
* Languages
** LSP
*** Key Bindings
#+BEGIN_SRC emacs-lisp
;; (map! :leader
;;       (:prefix-map ("l" . "lsp")
;;         :desc "doc" "d" #'lsp-ui-doc-glance
;;         :desc "find reference" "f" #'lsp-ui-peek-find-references))
#+END_SRC
*** LSP Configurations
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq company-minimum-prefix-length   1
        company-idle-delay              0.0
        company-tooltip-idle-delay      0.5
        lsp-eldoc-render-all            nil
        lsp-lens-enable            t))
#+END_SRC

*** LSP UI Configurations
#+BEGIN_SRC emacs-lisp
;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable         nil
;;         lsp-ui-doc-include-signature   t
;;         lsp-ui-doc-max-height          15
;;         lsp-ui-doc-max-width           150
;;         lsp-ui-doc-position            'at-point
;;         lsp-ui-peek-always-show        t
;;         lsp-ui-peek-fontify            'always))
#+END_SRC
*** LSP Treemacs
#+BEGIN_SRC emacs-lisp
;; (use-package! lsp-treemacs
;;   :defer t
;;   :config
;;   (lsp-treemacs-sync-mode 1))
#+END_SRC

** Python
+ Set flycheck checkers.
+ Enable rainbow delimiters.
+ Configure REPLs.
#+BEGIN_SRC emacs-lisp
(after! python
  (rainbow-delimiters-mode t))
(setq +python-ipython-repl-args '("-i" "--simple-prompt" "--no-color-info"))
(setq +python-jupyter-repl-args '("--simple-prompt"))
#+END_SRC
*** ~sphinx-doc~
+ Enable [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]], which generate Python docstrings for function and methods.
+ It does not work with python type hints.
#+BEGIN_SRC emacs-lisp
(use-package! sphinx-doc
  :defer
  :after python
  :config
  (sphinx-doc-mode t))

#+END_SRC
** Prolog
*** ~ediprolog~
+ Set the Prolog interpreter to ~swipl~.
#+BEGIN_SRC emacs-lisp
(use-package! ediprolog
  :defer
  :custom
  (ediprolog-system 'swi))
#+END_SRC
** Scala
- Register to projectile
  #+BEGIN_SRC emacs-lisp
  ;; (after! projectile
  ;;   (projectile-register-project-type 'sbt '("build.sbt")
  ;;                                     :src-dir "src/main"
  ;;                                     :test-dir "src/test"
  ;;                                     :compilation-dir "."
  ;;                                     :compile "bloop compile root"
  ;;                                     :test "sbt test"
  ;;                                     :test-suffix "Spec"))
  #+END_SRC
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
(setq backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

;; (after! scala-mode
;;   (setq compile-command "bloop compile root"
;;         compilation-directory ".")
;;   ;; (add-hook 'before-save-hook 'lsp-format-buffer)
;;   (map! "\C-c r" 'lsp-metals-build-import)
;;   (map! "\C-c s" 'lsp-metals-sources-scan)
;;   (map! "\C-c d" 'lsp-describe-thing-at-point)
;;   (map! "\C-c s" 'lsp-metals-sources-scan))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
;; (after! haskell-mode (setq lsp-document-sync-method 'full))
#+END_SRC
