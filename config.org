#+TITLE: Pip Boy Emacs Configurations

* Table of Contents :TOC_2:
- [[#preamble][Preamble]]
  - [[#emacs-lisp-scripts][Emacs Lisp Scripts]]
  - [[#personal-information][Personal Information]]
- [[#os][OS]]
  - [[#mac-os][Mac OS]]
- [[#ui][UI]]
  - [[#splash-image][Splash Image]]
  - [[#main-theme][Main Theme]]
  - [[#mouse-cursor-color][Mouse Cursor Color]]
  - [[#evil-cursor-state-colors][Evil Cursor State Colors]]
  - [[#modeline][Modeline]]
  - [[#treemacs][Treemacs]]
  - [[#editor][Editor]]
  - [[#font][Font]]
- [[#terminal][Terminal]]
  - [[#tmux][tmux]]
  - [[#vterm][vterm]]
- [[#tramp][Tramp]]
- [[#spell-checker][Spell Checker]]
- [[#dired][dired]]
- [[#projectile][Projectile]]
- [[#dash-api-browser][Dash API Browser]]
- [[#org][Org]]
  - [[#aesthetics][Aesthetics]]
  - [[#inline-latex-fragment][Inline Latex Fragment]]
  - [[#key-maps][Key Maps]]
  - [[#directory-structure][Directory Structure]]
  - [[#get-things-done][Get Things Done]]
  - [[#zettelkasten][Zettelkasten]]
  - [[#enable-minor-modes][Enable minor modes]]
  - [[#org-export][org-export]]
  - [[#org-babel][org-babel]]
  - [[#org-drill][org-drill]]
- [[#latex][LaTeX]]
- [[#flycheck][Flycheck]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#dap][DAP]]
  - [[#python][Python]]
  - [[#prolog][Prolog]]
  - [[#scala][Scala]]

* Preamble
** Emacs Lisp Scripts
If you have file A, that calls load to load a file at B, and B calls load on
file C using a relative path, then Emacs will complain about unable to find C.
Because, emacs does not switch current directory with load.

The following function solves this problem.
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
(defun leo-get-fullpath (@file-relative-path)
  "Return the full path of *file-relative-path, relative to caller's file location.

Example: If you have this line
 (xah-get-fullpath \"../xyz.el\")
in the file at
 /home/joe/emacs/emacs_lib.el
then the return value is
 /home/joe/xyz.el
Regardless how or where emacs_lib.el is called.

This function solves 2 problems.

① If you have file A, that calls the `load' on a file at B, and B calls `load' on file C using a relative path, then Emacs will complain about unable to find C. Because, emacs does not switch current directory with `load'.

To solve this problem, when your code only knows the relative path of another file C, you can use the variable `load-file-name' to get the current file's full path, then use that with the relative path to get a full path of the file you are interested.

② To know the current file's full path, emacs has 2 ways: `load-file-name' and `buffer-file-name'. If the file is loaded by `load', then `load-file-name' works but `buffer-file-name' doesn't. If the file is called by `eval-buffer', then `load-file-name' is nil. You want to be able to get the current file's full path regardless the file is run by `load' or interactively by `eval-buffer'."

  (concat (file-name-directory (or load-file-name buffer-file-name)) @file-relative-path))
#+end_src
** Personal Information
+ Username comes from the environment.
+ Set the email address to my Gmail address.
  #+begin_src emacs-lisp
  (setq! user-mail-address "ashkan.aleali@gmail.com")
  #+end_src

* OS
** Mac OS
*** Set ⌘ ⌥ ⌃ Keys
Set command, option, and alt key for both the left and the right part of the
keyboard.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode t)
(setq! mac-option-modifier 'meta
       mac-right-option-modifier 'meta
       mac-command-modifier 'super
       mac-right-command-modifier 'super)
#+END_SRC
* UI
** Splash Image
Because it's a Pip Boy Emacs ;) 
#+begin_src emacs-lisp
(setq! fancy-splash-image (expand-file-name "splash/pipboy.png" doom-private-dir))
#+end_src
** Main Theme
I'm obsessed with the dark solarized theme, but it looks blue in my terminal. So
I use zenburn if I'm in the terminal.

#+begin_src emacs-lisp
(setq! doom-theme (if (display-graphic-p) 'doom-solarized-dark-high-contrast 'doom-zenburn))
(custom-set-faces '(default ((t (:background nil)))))
#+end_src
** Mouse Cursor Color
#+begin_src emacs-lisp
(set-mouse-color "red")
#+end_src
** Evil Cursor State Colors
Set the cursor colors in vi editing mode.
#+begin_src emacs-lisp
(setq! evil-default-cursor '("DodgerBlue1" box)
       evil-normal-state-cursor  '("gray" box)
       evil-emacs-state-cursor   '("orange" box)
       evil-motion-state-cursor  '("SeaGreen1" box)
       evil-insert-state-cursor  '("white" bar)
       evil-visual-state-cursor  '("white" hbar)
       evil-replace-state-cursor '("pink" hbar))
#+end_src
** Modeline
*** Configure doom-modeline
#+BEGIN_SRC emacs-lisp
(setq! doom-modeline-icon (display-graphic-p)
       doom-modeline-major-mode-icon t
       doom-modeline-hud t
       doom-modeline-lsp t
       doom-modeline-buffer-file-name-style 'truncate-with-project
       doom-modeline-buffer-encoding nil)
#+END_SRC
*** Show battery usage
Ignore any error here. If running on a PC or server there is no battery status
to show.
#+BEGIN_SRC emacs-lisp
(ignore-errors (display-battery-mode))
#+END_SRC
*** Disable buffer size
Who cares how many bytes this file has?
#+BEGIN_SRC emacs-lisp
(setq! size-indication-mode nil)
#+END_SRC
** Treemacs
+ Use the colorful treemacs theme and doom additions
   #+BEGIN_SRC emacs-lisp
   (setq! doom-themes-treemacs-theme "doom-colors")
   (doom-themes-treemacs-config)
   #+END_SRC
+ hide files ignored by Git from treemacs
  #+BEGIN_SRC emacs-lisp
  (after! treemacs
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
  #+END_SRC
** Editor
*** Line Numbers
+ Setting the line number will cause slowdown when the LSP is used, display is
  large, or anytime the buffer is busy.
   +The situation looks better using Emacs with metals support.+
+ The relative line number fucks up variable pitch fonts.

#+BEGIN_SRC emacs-lisp
(setq! display-line-numbers-type 'relative)
#+END_SRC
*** fill-column
Set column length to be 90 and enable fill-column indicator in the editors.
#+begin_src emacs-lisp
(global-display-fill-column-indicator-mode +1)
#+end_src
** Font
+ Use IntelliJ fonts everywhere. They look gorgeous
+ Use =Chalkboard= as variable pitch font. It looks gorgeous.
#+BEGIN_SRC emacs-lisp
(setq! doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12)
       doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font" :size 13)
       doom-variable-pitch-font (font-spec :family "Chalkboard" :size 12)
       ivy-posframe-font (font-spec :family "JetBrains Mono Nerd Font" :size 13))
#+END_SRC
* Terminal
** tmux
*** Key Bindings
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("a" . "applications")
       (:prefix ("t" . "tmux")
        :desc "cd to buffer dir in active tmux session" "c" #'+tmux/cd
        :desc "cd to project dir in active tmux session" "p" #'+tmux/cd-to-project
        :desc "cd to highlighted region in active tmux session" "C" #'+tmux:cd-here
        :desc "run highlighted region as comand in active tmux session" "x" #'+tmux:run
        :desc "run command in active tmux session" "t" #'+tmux/run
        :desc "re-run the last command in active tmux session" "r" #'+tmux/rerun)))
#+END_SRC
** vterm
+ Set =fish= to be the default shell.
  #+BEGIN_SRC emacs-lisp
  (setq! vterm-shell "fish")
  #+END_SRC
* Tramp
From the [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html][tramp FAQ page]]:
#+begin_src emacs-lisp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
(setq tramp-verbose 1)

#+end_src
* Spell Checker
+ set personal ~ispell~ dictionary.
  #+begin_src emacs-lisp
  (setq! ispell-personal-dictionary "~/Dropbox/Apps/ispell/english.pws")
  #+end_src
* dired
+ Enable the DWIM (/Do What I Mean/) mode, which makes life much easier when
  moving stuff around in the ~dired~ mode.

#+BEGIN_SRC emacs-lisp
(setq! dired-dwim-target t)
#+END_SRC
* Projectile
+ Set projectile search path to add new projects.
  #+BEGIN_SRC emacs-lisp
  (setq! projectile-project-search-path '("~/w"))
  #+END_SRC
* Dash API Browser
Search Dash GUI from Emacs. Pretty handy! It only works in MacOS.
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("a" . "applications")
       (:prefix ("d" . "dash")
        :desc "dash at point" "d" #'dash-at-point
        :desc "dash at point with docset" "a" #'+tmux/cd-to-project)))
#+END_SRC
* Org
I use Org for GTD, Zettelkasten workflows, and as a replacement for markdown and
LaTeX whenever possible.
** Aesthetics
Configure the aesthetics of the org-mode buffer.
#+BEGIN_SRC emacs-lisp
(setq! org-hide-emphasis-markers t
       org-fontify-done-headline t
       org-fontify-whole-heading-line t
       org-fontify-todo-headline t
       org-fontify-emphasized-text t
       org-fontify-quote-and-verse-blocks t)
#+END_SRC
** Inline Latex Fragment
Use [[https://github.com/io12/org-fragtog][org-fragtog]] to enable auto preview of latex fragments.
#+begin_src emacs-lisp
(use-package! org-fragtog
  :after org
  :hook (org-mode . org-fragtog-mode)
  )
#+end_src
** Key Maps
#+BEGIN_SRC emacs-lisp
(after! org
  (map! :map org-mode-map
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup
        :n  )
  (map! :leader
        (:prefix-map ("a" . "applications")
         (:prefix ("o" . "org-mode")
          :desc "helm-bibtex" "h" #'helm-bibtex))))
#+END_SRC
** Directory Structure
These paths are usually synced through a cloud provided or a git service. These
paths include the followings:
+ org-roam and org-mode notes files.
+ Bibliography files generated by Zotero.
+ GTD workflow files.
#+BEGIN_SRC emacs-lisp
(setq! pipboy/org-notes (expand-file-name "~/Dropbox/Apps/org-roam/")
       pipboy/bibtex-files (directory-files "~/Dropbox/Apps/bibliography/bib/" 'full ".bib")
       pipboy/pdf-directory (expand-file-name "~/Dropbox/Apps/bibliography/pdf/")
       pipboy/gtd-directory (expand-file-name "~/Dropbox/Apps/beorg"))
#+END_SRC
** Get Things Done
*** Files
Here I set the files to be used by agenda and other task management
functionalities of the org-mode. I follow the GTD workflow.
1) I quick capture my tasks to my inbox.
2) I use the gtd file to organize my projects.
3) I use someday to backlog the tasks I don't wish to complete in the short
   term.
#+BEGIN_SRC emacs-lisp
(setq! org-inbox-file-name (expand-file-name "inbox.org" pipboy/gtd-directory) ;; TODO
       org-tickler-file-name (expand-file-name "tickler.org" pipboy/gtd-directory) ;; TODO
       org-someday-file-name (expand-file-name "someday.org" pipboy/gtd-directory) ;; TODO
       org-gtd-file-name (expand-file-name "gtd.org" pipboy/gtd-directory) ;; TODO

       org-notes-file-name (expand-file-name "notes.org" pipboy/gtd-directory) )
#+END_SRC
*** State Keywords
Set both the keywords and the face of GTD workflow.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-todo-keywords '((sequence "TODO(t)" "NOW(z)" "NEXT(n)" "WAIT(w)" "SOMEDAY(s) HOLD(h)" "PROJECT(p)"
                                       "|" "DONE(d)" "CANCEL(c)")
                             (sequence "[ ](T)" "[?](W)" "[-](N)"
                                       "|" "[X](x)"))

         org-todo-keyword-faces '(("NOW" . (:foreground "magenta" :reight "bold"))
                                  ("NEXT" . (:foreground "violet" :weight "bold"))
                                  ("WAIT" . +org-todo-onhold)
                                  ("HOLD" . +org-todo-onhold)
                                  ("SOMEDAY" . +org-todo-onhold)
                                  ("PROJECT". +org-todo-project)
                                  ("ABORT" . (+org-todo-inactive))
                                  ("[-]" . +org-todo-active)
                                  ("[?]" . +org-todo-onhold))))
#+END_SRC
*** Tags
These are the tags that I use with my task management workflow.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-tag-alist '((:startgroup . nil)
                         ("@work" . ?w)
                         ("@home" . ?h)
                         ("@business" . ?b)
                         ("@university" . ?u)
                         ("@travel" . ?t)
                         (:endgroup)

                         (:startgroup . nil)
                         ("@errand". ?r)
                         ("@phone" . ?p)
                         ("@email" . ?e)
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("emacs")
                         ("tools")
                         ("server")
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("read")
                         ("write")
                         ("study")
                         ("implement")
                         ("research")
                         (:endgroup . nil)

                         (:startgroup . nil)
                         ("TOC_1" . ?1)
                         ("TOC_2" . ?2)
                         ("TOC_3" . ?3)
                         ("TOC_4" . ?4)
                         (:endgroup . nil))))
#+END_SRC
*** org-agenda
**** Files
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-agenda-files (list pipboy/gtd-directory)
         org-agenda-show-inherited-tags t
         org-default-notes-file org-inbox-file-name))
#+END_SRC
**** org-super-agenda
#+BEGIN_SRC emacs-lisp
(use-package! org-super-agenda
  :defer
  :after (org org-mode org-super-agenda)
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))
#+END_SRC
**** Agenda View
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-agenda-skip-scheduled-if-done t
         org-agenda-skip-deadline-if-done t
         org-agenda-include-deadlines t
         org-agenda-block-separator nil
         org-agenda-tags-column 100 ;; from testing this seems to be a good value
         org-agenda-compact-blocks t)

  (setq! org-agenda-custom-commands
         '(("o" "Overview"
            ((agenda "" ((org-agenda-span 'day)))
             (todo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next" :todo "NEXT" :order 1)
                          (:name "Important" :priority "A" :order 6)
                          (:name "Due Today" :deadline today :order 2)
                          (:name "Due Soon" :deadline future :order 8)
                          (:name "Overdue" :deadline past :face error :order 7)
                          (:name "Inbox" :category "inbox" :order 10)
                          (:name "To read" :tag "Read" :order 30)
                          (:name "Waiting" :todo "WAIT" :order 20)
                          (:discard (:anything t))))))))

           ("a" "dashboard"
            ((agenda "" ((org-agenda-span 'week)))
             (todo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Now" :todo "NOW" :order 1)
                          (:name "Next" :todo "NEXT" :order 10)
                          (:name "Due Today" :deadline today :order 20)
                          (:name "Due Soon" :deadline future :order 30)
                          (:name "Overdue" :deadline past :face error :order 70)
                          (:name "Inbox"  :category "inbox" :order 80)
                          (:name "Errands" :tag ("@errand") :order 100)
                          (:discard (:anything t))))))))
           ("p" "Projects"
            ((todo "" ((org-agenda-overriding-header "All Projects")
                       (org-agenda-remove-tags 1)
                       (org-super-agenda-groups
                        '((:auto-parent t :todo "TODO")))))))

           ("h" "@home Projects"
            ((todo "" ((org-agenda-overriding-header "Personal Projects")
                       (org-agenda-remove-tags 1)
                       (org-super-agenda-groups
                        '((:discard (:not (:tag ("@home"))))
                          (:auto-parent t :tag "@home")))))))

           ("w" "@work Projects"
            ((todo "" ((org-agenda-overriding-header "Work Projects")
                       (org-agenda-remove-tags 1)
                       (org-super-agenda-groups
                        '((:discard (:not (:tag ("@work"))))
                          (:auto-parent t)))))))

           ("r" "Errands"
            ((alltodo "" ((org-agenda-overriding-header "Errands")
                          (org-super-agenda-groups
                           '((:discard (:not (:tag "@errand")))))))))

           ("i" "Inbox"
            ((alltodo "" ((org-agenda-overriding-header "Inbox")
                          (org-super-agenda-groups
                           '((:name "Inbox" :category "inbox")
                             (:discard (:anything t)))))))))))
#+END_SRC


*** org-refile
Set the refile targets to be my project, someday, and tickler files.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-refile-targets '((org-gtd-file-name :maxlevel . 3)
                              (org-someday-file-name :level . 1)
                              (org-tickler-file-name :maxlevel . 2))
         org-refile-allow-creating-parent-nodes 'confirm))
#+END_SRC
*** org-capture
#+BEGIN_SRC emacs-lisp
(after! org
  (setq!
   org-capture-templates `(("i" "Inbox" entry
                            (file+headline org-inbox-file-name "Tasks")
                            "* TODO %i%?\n%U")

                           ("I" "Inbox This Line" entry
                            (file+headline org-inbox-file-name "Tasks")
                            "* TODO %i%?\n%U\n%a")

                           ("t" "Tickler" entry
                            (file+headline org-tickler-file-name "Tickler")
                            "* %i%?\n%U")

                           ("T" "Tickler This Line" entry
                            (file+headline org-tickler-file-name "Tickler")
                            "* %i%?\n%U\n%a")
                           ("p"
                            "Protocol"
                            entry
                            (file+headline ,org-notes-file-name "Notes")
                            "* %? [[%:link][%:description]]\n%U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n")
                           ("L"
                            "Protocol Link"
                            entry
                            (file+headline ,org-notes-file-name "Notes")
                            "* %?[[%:link][%:description]]\n%U\n"))))
#+END_SRC
*** org archive
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-archive-location (concat (expand-file-name "archive.org" pipboy/gtd-directory) "::")))
#+END_SRC
** Zettelkasten
This section contains the configurations enabling me to take notes using
~org-roam~. I also take notes on papers and books using ~org-roam~. I configure
bibtex related packages to be able to use my bibs generated by Zotero in
~org-roam~.
*** org-roam
It's better to read this from the environment instead.
I am moving to a pure org-roam workflow; set org-directory to be the org-roam
files also.
#+begin_src emacs-lisp
(setq! org-roam-directory pipboy/org-notes
       org-directory pipboy/org-notes)
#+end_src
*** org-ref
Most of these configurations are inspired by [[https://www.ianjones.us/org-roam-bibtex][this link]].
#+BEGIN_SRC emacs-lisp
(use-package! org-ref
  :defer
  :after org-mode
  :config
  (setq! org-ref-bibliography-notes (concat pipboy/org-notes "/bibnotes.org") ;; TODO make this more explicit
         org-ref-notes-directory pipboy/org-notes
         org-ref-bibliography-files pipboy/bibtex-files
         reftex-default-bibliography pipboy/bibtex-files
         org-ref-default-bibliography pipboy/bibtex-files
         org-ref-pdf-directory pipboy/pdf-directory
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
         org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-function 'orb-edit-notes))
;; TODO Rewrite title formats using the (concat ...) function
#+END_SRC

See examples in[[*helm-bibtex][ helm-bibtex]] section.
*** helm-bibtex & ivy-bibtex
#+BEGIN_SRC emacs-lisp
(setq! bibtex-completion-notes-path pipboy/org-notes
       bibtex-completion-bibliography pipboy/bibtex-files
       bibtex-completion-pdf-field "file"
       bibtex-completion-notes-template-multiple-files (concat
                                                        "#+TITLE: ${title}\n"
                                                        "#+ROAM_KEY: cite:${=key=}\n"
                                                        "* TODO Notes\n"
                                                        ":PROPERTIES:\n"
                                                        ":Custom_ID: ${=key=}\n"
                                                        ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
                                                        ":AUTHOR: ${author-abbrev}\n"
                                                        ":JOURNAL: ${journaltitle}\n"
                                                        ":DATE: ${date}\n"
                                                        ":YEAR: ${year}\n"
                                                        ":DOI: ${doi}\n"
                                                        ":URL: ${url}\n"
                                                        ":END:\n\n"))
#+END_SRC

*** org-noter
I use org-noter to take notes on PDF and EPUB documents.
#+BEGIN_SRC emacs-lisp
(setq! org-noter-notes-search-path (list pipboy/org-notes)
       org-noter-notes-window-location 'horizontal-split)
#+END_SRC
**** org-pdftools
#+BEGIN_SRC emacs-lisp
(use-package! org-pdftools
  :defer
  :after org-mode
  :hook
  (org-mode . org-pdftools-setup-link))
#+END_SRC
**** org-noter-pdftools
#+BEGIN_SRC emacs-lisp
(use-package! org-noter-pdftools
  :after org-noter
  :defer
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC
*** org-roam-bibtex
~org-roam-bibtex~ is a library which offers a tighter integration between
~org-roam~, ~helm-bibtex~, and ~org-ref~.

#+BEGIN_SRC emacs-lisp
(use-package! org-roam-bibtex
  :defer
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}
- tags ::
- keywords :: ${keywords}
\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"
           :unnarrowed t))))
#+END_SRC

*** deft
**** deft user interface
#+BEGIN_SRC emacs-lisp
(defun my-deft/strip-quotes (str)
  (cond ((string-match "\"\\(.+\\)\"" str) (match-string 1 str))
        ((string-match "'\\(.+\\)'" str) (match-string 1 str))
        (t str)))

(defun my-deft/parse-title-from-front-matter-data (str)
  (if (string-match "^title: \\(.+\\)" str)
      (let* ((title-text (my-deft/strip-quotes (match-string 1 str)))
             (is-draft (string-match "^draft: true" str)))
        (concat (if is-draft "[DRAFT] " "") title-text))))

(defun my-deft/deft-file-relative-directory (filename)
  (file-name-directory (file-relative-name filename deft-directory)))

(defun my-deft/title-prefix-from-file-name (filename)
  (let ((reldir (my-deft/deft-file-relative-directory filename)))
    (if reldir
        (concat (directory-file-name reldir) " > "))))

(defun my-deft/parse-title-with-directory-prepended (orig &rest args)
  (let ((str (nth 1 args))
        (filename (car args)))
    (concat
      (my-deft/title-prefix-from-file-name filename)
      (let ((nondir (file-name-nondirectory filename)))
        (if (or (string-prefix-p "README" nondir)
                (string-suffix-p ".txt" filename))
            nondir
          (if (string-prefix-p "---\n" str)
              (my-deft/parse-title-from-front-matter-data
               (car (split-string (substring str 4) "\n---\n")))
            (apply orig args)))))))

(provide 'my-deft-title)
(require 'my-deft-title)
(advice-add 'deft-parse-title :around #'my-deft/parse-title-with-directory-prepended)
#+END_SRC
**** deft directory
I use deft to search the notes I take using org roam.
#+begin_src emacs-lisp
(setq! deft-directory pipboy/org-notes
       deft-recursive t)
#+end_src
** Enable minor modes
  #+begin_src emacs-lisp
  (add-hook! 'org-mode-hook #'auto-fill-mode)
  #+end_src
** org-export
*** LaTex
+ Enable bibtex compilation
+ Set log files to intermediate files generated by the exporter so org-export
  delete these after exporting
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("%latex -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "%latex -interaction nonstopmode -output-directory %o %f"
        "%latex -interaction nonstopmode -output-directory %o %f")
      org-latex-logfiles-extensions
      '("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb"
        "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
        "pygtex" "pygstyle"))
#+END_SRC

+ [ ] Set LaTex export engine to be XeLaTex

** org-babel
*** Prolog
#+BEGIN_SRC emacs-lisp
(use-package! ob-prolog
  :defer
  :after org-mod)
#+END_SRC
** org-drill
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'cl)
  (require 'org-drill))
#+END_SRC
* LaTeX
+ Use xalatex by default
  #+BEGIN_SRC emacs-lisp
   (setq-default TeX-engine 'xetex)
  #+END_SRC
+ Always Generate PDF for TeX files
  #+BEGIN_SRC emacs-lisp
  (setq-default TeX-PDF-mode t)
  #+END_SRC
+ Use luatex in latex-preview-pate
  #+BEGIN_SRC emacs-lisp
  (setq pdf-latex-command "xetex")
  #+END_SRC
* Flycheck
+ Check syntax automatically.
  #+BEGIN_SRC emacs-lisp
  (after! flycheck
    (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change)))
  #+END_SRC
* Languages
** LSP
*** Configuration
+ Set a ridiculous limit on number of file watch. This is needed for Python
  virtual environments which reside inside the project worktree.
#+begin_src emacs-lisp
(setq! lsp-file-watch-threshold 100000)
#+end_src
*** Autocompletion
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq company-minimum-prefix-length   1
        company-idle-delay              0.0
        company-tooltip-idle-delay      0.0
        lsp-eldoc-render-all            nil
        lsp-lens-enable                 t))
#+END_SRC

*** LSP UI Configurations
#+BEGIN_SRC emacs-lisp
(after! lsp-ui
  (setq! lsp-ui-doc-show-with-cursor nil
         lsp-ui-sideline-enable      t
         lsp-ui-doc-max-height       15
         lsp-ui-doc-max-width        100
         lsp-ui-doc-position         'at-point
         lsp-ui-peek-always-show     t
         lsp-ui-peek-fontify         'always)

  (set-face-attribute 'lsp-face-highlight-textual nil
                      :weight 'bold
                      :background "#0A2933"
                      :foreground "#C61C6F"))
#+END_SRC

** DAP
*** UI
+ Enable Hydra when hitting a breakpoint
#+begin_src emacs-lisp
;; (after! dap-mode
;;   (add-hook 'dap-stopped-hook
;;             (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src
*** Python
It's recommended to use =debugpy= over =ptvsd=.
#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))
#+end_src
*** Keybindings
#+begin_src emacs-lisp
(after! dap-mode
  (map! :map dap-mode-map
        :leader
        :prefix ("d" . "dap")
        ;; basics
        :desc "dap next"          "n" #'dap-next
        :desc "dap step in"       "i" #'dap-step-in
        :desc "dap step out"      "o" #'dap-step-out
        :desc "dap continue"      "c" #'dap-continue
        :desc "dap hydra"         "h" #'dap-hydra
        :desc "dap debug restart" "r" #'dap-debug-restart
        :desc "dap debug"         "s" #'dap-debug
        :desc "dap ui repl"       "R" #'dap-ui-repl

        ;; debug
        :prefix ("dd" . "Debug")
        :desc "dap debug recent"  "r" #'dap-debug-recent
        :desc "dap debug last"    "l" #'dap-debug-last

        ;; eval
        :prefix ("de" . "Eval")
        :desc "eval"                "e" #'dap-eval
        :desc "eval region"         "r" #'dap-eval-region
        :desc "eval thing at point" "s" #'dap-eval-thing-at-point
        :desc "add expression"      "a" #'dap-ui-expressions-add
        :desc "remove expression"   "d" #'dap-ui-expressions-remove

        :prefix ("db" . "Breakpoint")
        :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
        :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
        :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
        :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message))
#+end_src

** Python
*** Editor
+ Enable rainbow mode
#+BEGIN_SRC emacs-lisp
(after! python
  (rainbow-delimiters-mode t))
#+END_SRC
*** Debugger
#+begin_src emacs-lisp
(after! python (require 'dap-python))
#+end_src

*** REPL
#+begin_src emacs-lisp
(setq +python-ipython-repl-args '("-i" "--simple-prompt" "--no-color-info"))
(setq +python-jupyter-repl-args '("--simple-prompt"))
#+end_src

*** Poetry
**** Key Bindings
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("a" . "applications")
       (:prefix ("p" . "poetry")
        :desc "add poetry dependency" "d" #'poetry-add
        :desc "add poetry dev dependency" "D" #'poetry-add-dev-dep
        :desc "poetry run" "r" #'poetry-run
        :desc "poetry build" "b" #'poetry-build
        :desc "poetry install" "i" #'poetry-install
        :desc "poetry install-install" "I" #'poetry-install-install)))
#+END_SRC
*** Pyright Language Server
#+BEGIN_SRC emacs-lisp
(after! python
  (setq! lsp-pyright-venv-path (expand-file-name "~/.venv/")))
#+END_SRC
*** ~sphinx-doc~
+ Enable [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]], which generate Python docstrings for function and methods.
+ It does not work with python type hints.
#+BEGIN_SRC emacs-lisp
(use-package! sphinx-doc
  :defer
  :after python
  :config
  (sphinx-doc-mode t))

#+END_SRC
** Prolog
*** ~ediprolog~
+ Set the Prolog interpreter to ~swipl~.
#+BEGIN_SRC emacs-lisp
(use-package! ediprolog
  :defer
  :custom
  (ediprolog-system 'swi))
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
(setq backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
